{"version":3,"sources":["components/Section/Section.jsx","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","App.js","index.js","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css"],"names":["Section","title","children","className","styles","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","item","feedback","onClick","type","Notification","message","notification","App","state","countClicker","name","setState","prevState","this","countTotalFeedback","Math","round","Object","keys","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yRAmBeA,EAdC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,SACtB,OACI,qCACI,oBAAIC,UAAWC,IAAOH,MAAtB,SAA+BA,IADnC,IAEKC,MCUEG,EAjBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OAChB,gCACK,4CACA,uCAAUJ,KACZ,0CAAaC,KACX,sCAASC,KACT,uCAAUC,KACV,oDAAuBC,EAAvB,W,gBCiBOC,EAtBS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,gBACnC,OAASD,EAAQE,KAAI,SAAAC,GAAI,OAClB,wBACEZ,UAAWC,IAAOY,SAClBC,QAAS,kBAAIJ,EAAiBE,IAC9BG,KAAK,SAHP,SAMGH,GAFIA,O,gBCEAI,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGjB,UAAWC,IAAOiB,aAArB,SAAoCD,KCiE9BE,E,4MA1DbC,MAAQ,CACRjB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGLgB,aAAe,SAAAC,GACb,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAOE,EAAUF,GAAQ,O,wDAI9B,WAIE,OAAQG,KAAKL,MAAMjB,KAAOsB,KAAKL,MAAMhB,QAAUqB,KAAKL,MAAMf,M,6CAG5D,WACG,OAAKoB,KAAKC,qBAGHC,KAAKC,MAAOH,KAAKL,MAAMjB,KAAOsB,KAAKC,qBAAsB,KAFxD,I,oBAMX,WAEE,MAA+BD,KAAKL,MAA5BjB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAIxB,OACC,qCACE,sBAAKL,UAAU,kBAAf,UACG,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBW,QAASoB,OAAOC,KAAKL,KAAKL,OACzCV,gBAAiBe,KAAKJ,iBAE1B,cAAC,EAAD,CAASvB,MAAM,YAAf,SACG2B,KAAKC,qBACJ,cAAC,EAAD,CACEvB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,KAAKC,qBACZnB,mBAAoBkB,KAAKM,oCACxB,cAAC,EAAD,CAAcd,QAAQ,2BAdlC,W,GApCce,aCJlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCV1BC,EAAOC,QAAU,CAAC,MAAQ,yB,kBCA1BD,EAAOC,QAAU,CAAC,SAAW,oC,kBCA7BD,EAAOC,QAAU,CAAC,aAAe,sC","file":"static/js/main.7f853952.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./Section.module.css\"\r\n\r\n\r\nconst Section = ({ title, children})=> {\r\n    return (\r\n        <>\r\n            <h2 className={styles.title} >{title}</h2>,\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\n\r\nconst Statistics = ({good, neutral, bad, total, positivePercentage}) => (\r\n   <div>\r\n        <h1>Statistics</h1>\r\n        <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n        <p>Bad: {bad}</p>\r\n        <p>Total:{total}</p>\r\n        <p>Positive Feedback: {positivePercentage}%</p>\r\n        </div>\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./FeedbackOptions.module.css\"\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback  }) => {\r\n return ( options.map(item => (\r\n        <button\r\n          className={styles.feedback}\r\n          onClick={()=>onLeaveFeedback (item)}\r\n          type=\"button\"\r\n          key={item}\r\n        >\r\n          {item}\r\n        </button>\r\n      )))\r\n \r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n\r\n\r\nexport default FeedbackOptions;","  \r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./Notification.module.css\"\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p className={styles.notification}>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;","import React, {Component} from 'react';\r\n// import Counter from './components/Counter';\r\n// import Dropdown from './components/Dropdown'\r\n// import ColorPicker from './components/ColorPicker'\r\n// import TodoList from './components/TodoList';\r\nimport './Styles.css'\r\nimport Section from './components/Section'\r\nimport Statistics from './components/Statistics';\r\nimport FeedbackOptions from './components/FeedbackOptions'\r\nimport Notification from './components/Notification';\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0\r\n  };\r\n  \r\n  countClicker = name => {\r\n    this.setState(prevState => ({\r\n      [name]: prevState[name] + 1,\r\n    }));\r\n  };\r\n  \r\n  countTotalFeedback() {\r\n    // const arrayValue = Object.values(this.state);\r\n    // const total = arrayValue.reduce((acc, value) => acc + value, 0);\r\n    // return total\r\n    return  this.state.good + this.state.neutral + this.state.bad;\r\n    \r\n  };\r\n  countPositiveFeedbackPercentage() {\r\n     if (!this.countTotalFeedback()) {\r\n      return 0\r\n    }\r\n    return  Math.round((this.state.good / this.countTotalFeedback())*100);\r\n  };\r\n\r\n\r\n  render() {\r\n    \r\n    const { good, neutral, bad } = this.state;\r\n    \r\n  \r\n\r\n   return (\r\n    <>\r\n      <div className=\"Feedback_window\">\r\n         <Section title=\"Please leave feedback\">\r\n           <FeedbackOptions options={Object.keys(this.state)}\r\n             onLeaveFeedback={this.countClicker} />\r\n         </Section>\r\n         <Section title=\"Statistic\">\r\n           {this.countTotalFeedback() ? (\r\n             <Statistics\r\n               good={good}\r\n               neutral={neutral}\r\n               bad={bad}\r\n               total={this.countTotalFeedback()}\r\n               positivePercentage={this.countPositiveFeedbackPercentage()} />\r\n           ) : (<Notification message=\"No feedback given\" />)}\r\n           \r\n           </Section>\r\n         </div>;\r\n         </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../node_modules/modern-normalize/modern-normalize.css';\r\n// import './index.css';\r\nimport App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__2VVf2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback\":\"FeedbackOptions_feedback__2JueJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__2k04W\"};"],"sourceRoot":""}